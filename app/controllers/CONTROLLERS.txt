---------------------
STANDARD CRUD ACTIONS
----------------------

create:
	new -> display new record form
	create -> process new record form

read:
	index ->display a list of records
	show -> display a detailed view of a single record

update:
	edit -> display edit record form
	update -> process edit record form

delete:
	delete -> display delete record form
	destroy -> process delete record form


-------------
CONTROLLERS
-------------

 rails generate controller Name of the controller in plural action action action action


  rails generate controller Subjects index show new edit delete

  inside controllers folder get's create a file that has the name of the controller we gave, and inside that file there are empty def of the actions. 

  AND in views folder get's create a folder with the name of the controller we gave above, and inside that folder there are files .html.erb and the names of these files are the actions that i have gave above

  AND there are create urls inside the routes.rb file, inside config folder.these urls are the name of the controller and the name of the action that I have gave above.SOS we dontneed them, we must delete them.


-------------
READ ACTIONS
-------------

INDEX
-------

στο αρχειο του controller που δημιουργήσαμε, στον placeholder για την index action,  προσθέουμε κώδικα
για να πουμε στον controller να δημιουργησει μια λίστα ολων των subjects. Δημιουργουμε ενα instance variable το οποίο μπορεί να το χρησιμοποιήσει το αντιστοιχο view temlpate (index.html.erb), και το κανουμε assign σε όλα τα subjects τα οποία θα υπάρχουν σε αυτήν την λίστα.
Επειδή υπάρχει scope στο model που αφορα τα subjects, χρησιμοποιούμε το sorted (θα μπορούσαμε να χρησιμοποιησυμε όποιο απο αυτά που εχουμε καθορισει στο model για τα subjects models/subject.rb) 

@subjects = Subject.sorted

Επειτα παμε στο view για τo index του view views/subjects/index.html.erb, κια εκει γραφουμε την html που θέλουμε μαζί με την ruby


SHOW
------

Show requires an id, so we must have an id saved in our database, otherwise we get a "not found error"

στο αρχειο του controller που δημιουργήσαμε, στον placeholder για την show action,  προσθέουμε κώδικα
για να πουμε στον controller να βρει κάθε subject με βαση το id του καθενος. Δημιουργουμε ενα instance variable το οποίο μπορεί να το χρησιμοποιήσει το αντιστοιχο view temlpate (show.html.erb)

    @subject = Subject.find(params[:id]) 

    # βρισκουμε δυναμικα το id καθε subject ανακτωντας το απο το url  xrhsimopoiontaw to params[:id]

 Επειτα παμε στο view για τo show του view views/subjects/show.html.erb, κια εκει γραφουμε την html που θέλουμε μαζί με την ruby
  



--------------
CREATE ACTIONS
--------------


 NEW
 ----

στο αρχειο του controller που δημιουργήσαμε, στον placeholder για την new action,  προσθέουμε κώδικα
για να πουμε στον controller να δημιουργησει ενα object. Δημιουργουμε ενα instance variable το οποίο μπορεί να το χρησιμοποιήσει το αντιστοιχο view temlpate (new.html.erb). Αν δεν καθορίσω κωδικα, πάλι θα δημιουργηθεί και θα εμφανιστει το object απο το view, αλλα δεν θα εμφανιζονται οι default values που εχω ορισει απο τα migrations. 

@subject = Subject.new

επισης μπορουμε να καθρισουμε κι εκει default values
@subject = Subject.new(:name => "Default value")


Επειτα παμε στο view για τo show του view views/subjects/new.html.erb, κια εκει γραφουμε την html που θέλουμε μαζί με την ruby



CREATE
---------

Main steps for creating/processing the form

*instantiate a new object using form parameters

*save the object

*if save succeds, redirect to somewhere, usually to index action

*if save fails (according to data validation), redisplay the form so user can fix the problems and resubmit

στο αρχειο του controller που δημιουργήσαμε, δεν υπάρχει placeholder για την create action,
Την δημιουργούμε και εκει βάζουμε τον κωδικα για να πουμε στον controller τι ακριβως να κανει ωστε να ακολουθησει ακριβως τα τεσσερα παραπανω βηματα για το proccess. 

  def create
    @subject = Subject.new(subject_params)     

    if @subject.save

    redirect_to(:action => "index")
    
    else

    render("new")
    end
  end

**** this goes at the buttom of the controller*****

private

    def subject_params
      params.require(:subject).permit(:name, :posistion, :visible)
    end

*****    

αν παμε στον browser, στην σελιδα subject/new και γεμισουμε με δεδομενα ολα τα πεδια και πατησουμε "create subject", θα μας εμφανιστεί error, γιατί το request στο routes ειναι μονο get, ενω εδω ειναι post. πρεπει να το ορισουμε το post στο route. config/routes.rb προσθετω το 
match ':controller(/:action(/:id))', :via => [:get, :post]


--------------
UPDATE ACTIONS
--------------

an id is required (EDIT)

find an existing object and existing attributes to update its data (UPDATE)


EDIT
------
στο αρχειο του controller που δημιουργήσαμε, στον placeholder για την edit action,  προσθέουμε κώδικα για να πουμε στον controller να βρει κάθε subject με βαση το id του καθενος. Δημιουργουμε ενα instance variable το οποίο μπορεί να το χρησιμοποιήσει το αντιστοιχο view temlpate (edit.html.erb)

 @subject = Subject.find(params[:id])

 επειτα στο edit.html.erb παμε και βαζουμε κωδικα html και ruby για να ζωγραφισει την φόρμα του edit. Η φόρμα αυτή είναι παρομοια με την φορμα του new.html.erb 


UPDATE
------
Main steps for updating/processing the form

*find an existing object using form parameters

*update the attributes and the object

*if update succeds, redirect to somewhere, usually to show action

*if update succeds, redirect to somewhere, usually to show action

*we want the form to redisplay and have all the inputs user put in fields


στο αρχειο του controller που δημιουργήσαμε, δεν υπάρχει placeholder για την update action,
Την δημιουργούμε και εκει βάζουμε τον κωδικα για να πουμε στον controller τι ακριβως να κανει ωστε να ακολουθησει ακριβως τα τεσσερα παραπανω βηματα για το proccess. 



    @subject = Subject.find(params[:id])-> find the existing object

    if @subject.update_attributes(subject_params)     
    
    redirect_to(:action => "show", :id => @subject.id)

    else

    render("edit")


--------------
DELETE ACTIONS
--------------

an id is required (DELETE)

find an existing object and destroy it (DESTROY)




DELETE
------

displays a delete form, aka delete confirmation page, warings, display record attributes that are to be deleted

Delete page is optional

στο αρχειο του controller που δημιουργήσαμε, στον placeholder για την delete action,  προσθέουμε κώδικα για να πουμε στον controller να βρει κάθε subject με βαση το id του καθενος. Δημιουργουμε ενα instance variable το οποίο μπορεί να το χρησιμοποιήσει το αντιστοιχο view temlpate (delete.html.erb)

 @subject = Subject.find(params[:id])

 επειτα στο delete.html.erb παμε και βαζουμε κωδικα html και ruby για να ζωγραφισει την φόρμα του delete. Η φόρμα αυτή είναι παρομοια με την φορμα του new.html.erb 


DESTROY
--------

processes that form

Main steps for deleting/destroying the object

*find an existing object using form parameters

*destroy the object

*redirect to somewhere, usually to index action


στο αρχειο του controller που δημιουργήσαμε, δεν υπάρχει placeholder για την destroy action,
Την δημιουργούμε και εκει βάζουμε τον κωδικα για να πουμε στον controller τι ακριβως να κανει ωστε να ακολουθησει ακριβως τα tria παραπανω βηματα για το proccess. 

because destroy action will not display a template we can use a local/simple variable (subject), not an instance vavriable (@subject) 

   subject = Subject.find(params[:id])
   subject.destroy

   we can find and destroy the object all in once
   subject = Subject.find(params[:id]).destroy
    
   redirect_to(:action => "index")

    







